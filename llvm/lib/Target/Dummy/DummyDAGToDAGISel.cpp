#include "DummyInstrInfo.h"
#include "DummySubtarget.h"
#include "DummyTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "dummy-ISelDAGToDAG"

namespace {
class DummyDAGToDAGISel : public SelectionDAGISel {
  const DummySubtarget &Subtarget;

public:
  explicit DummyDAGToDAGISel(DummyTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(*TM.getSubtargetImpl()) {}

  void Select(SDNode *N) override;
  virtual StringRef getPassName() const override {
    return "Dummy DAG->DAG Pattern Instruction Selection";
  }
  bool SelectAddrImm12(SDValue N, SDValue &Base,
                                      SDValue &Offset);

private:
// Include the pieces autogenerated from the target description.
#include "DummyGenDAGISel.inc"
};
} // end anonymous namespace

void DummyDAGToDAGISel::Select(SDNode *N) {
  N->print(llvm::errs());
  llvm::errs() << "\n DummyDAGToDAGISel::Select xujing" << N->getOpcode() << "\n";
  SelectCode(N);
  return;
}

bool DummyDAGToDAGISel::SelectAddrImm12(SDValue Addr, SDValue &Base,
                                      SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT ValTy = Addr.getValueType();
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
    return true;
  }

  return false;
}

FunctionPass *createDummyIselPass(DummyTargetMachine &TM,
                                  CodeGenOpt::Level OptLevel) {
  return new DummyDAGToDAGISel(TM, OptLevel);
}
