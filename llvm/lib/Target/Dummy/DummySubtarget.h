//===-- DirectXSubtarget.h - Define Subtarget for DirectX -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the DirectX specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_DUMMY_DUMMYSUBTARGET_H
#define LLVM_DUMMY_DUMMYSUBTARGET_H

#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include "DummyFrameLowering.h"
#include "DummyInstrInfo.h"
#include "DummyRegisterInfo.h"
#include "DummyTargetLowering.h"
#include "llvm/CodeGen/ISDOpcodes.h"

#define GET_SUBTARGETINFO_HEADER
#include "DummyGenSubtargetInfo.inc"

namespace DUMMYISD {
enum NodeType {
  // Start the numbering where the builtin ops and target ops leave off.
  FIRST_NUMBER = ::llvm::ISD::BUILTIN_OP_END,
  RET_FLAG,
  // This loads a 32-bit immediate into a register.
  MOVEi32,
  CALL,
};
}

namespace llvm {

class DummyTargetMachine;

class DummySubtarget : public DummyGenSubtargetInfo {
  DummyFrameLowering FL;
  DummyInstrInfo InstrInfo;
  DummyRegisterInfo RegInfo;
  InstrItineraryData InstrItins;
  DummyTargetLowering TL;

  bool UseStd = false;

  virtual void anchor(); // virtual anchor method

public:
  DummySubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                   const DummyTargetMachine &TM);

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  const TargetLowering *getTargetLowering() const override {
    return &TL;
  }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FL;
  }
  const TargetInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};

} // end namespace llvm

#endif // LLVM_DUMMY_DUMMYSUBTARGET_H
